diff --exclude=.git --exclude=.hg -rupN ./src/libmodplug/config.h ./src/libmodplug-patched/config.h
--- ./src/libmodplug/config.h	Thu Jan  1 01:00:00 1970
+++ ./src/libmodplug-patched/config.h	Tue Aug 25 12:09:05 2015
@@ -0,0 +1,139 @@
+/* src/config.h.in.  Generated from configure.in by autoheader.  */
+
+/* Define if building universal (internal helper macro) */
+#undef AC_APPLE_UNIVERSAL_BUILD
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#undef HAVE_INTTYPES_H
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#ifndef __APPLE__
+#define HAVE_MALLOC_H 1
+#endif
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `setenv' function. */
+#undef HAVE_SETENV
+
+/* Define to 1 if you have the `sinf' function. */
+#define HAVE_SINF 1
+
+#if defined(BLACKBERRY)
+#  define HAVE_STDINT_H
+#else
+/* Define to 1 if you have the <stdint.h> header file. */
+#  undef HAVE_STDINT_H
+#endif
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#undef HAVE_STDLIB_H
+
+/* Define to 1 if you have the <strings.h> header file. */
+#undef HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#undef HAVE_STRING_H
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#undef HAVE_UNISTD_H
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#undef LT_OBJDIR
+
+/* Name of package */
+#undef PACKAGE
+
+/* Define to the address where bug reports for this package should be sent. */
+#undef PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#undef PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#undef PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#undef PACKAGE_TARNAME
+
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
+/* Define to the version of this package. */
+#undef PACKAGE_VERSION
+
+/* Define to 1 if you have the ANSI C header files. */
+#undef STDC_HEADERS
+
+/* Version number of package */
+#undef VERSION
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined(AC_APPLE_UNIVERSAL_BUILD) || defined(__ppc__) || defined(__ppc64__)
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#  undef WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#undef _UINT32_T
+
+/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#undef _UINT64_T
+
+/* Define for Solaris 2.5.1 so the uint8_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#undef _UINT8_T
+
+/* Define to the type of a signed integer type of width exactly 16 bits if
+   such a type exists and the standard includes do not define it. */
+#undef int16_t
+
+/* Define to the type of a signed integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#undef int32_t
+
+/* Define to the type of a signed integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#undef int64_t
+
+/* Define to the type of a signed integer type of width exactly 8 bits if such
+   a type exists and the standard includes do not define it. */
+#undef int8_t
+
+/* Define to the type of an unsigned integer type of width exactly 16 bits if
+   such a type exists and the standard includes do not define it. */
+#undef uint16_t
+
+/* Define to the type of an unsigned integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#undef uint32_t
+
+/* Define to the type of an unsigned integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#undef uint64_t
+
+/* Define to the type of an unsigned integer type of width exactly 8 bits if
+   such a type exists and the standard includes do not define it. */
+#undef uint8_t
diff --exclude=.git --exclude=.hg -rupN ./src/libmodplug/src/libmodplug/stdafx.h ./src/libmodplug-patched/src/libmodplug/stdafx.h
--- ./src/libmodplug/src/libmodplug/stdafx.h	Mon Mar 10 00:52:07 2014
+++ ./src/libmodplug-patched/src/libmodplug/stdafx.h	Tue Aug 25 12:09:05 2015
@@ -89,7 +89,9 @@ inline LONG MulDiv (long a, long b, long
   return ((uint64_t) a * (uint64_t) b ) / c;
 }
 
-#define MODPLUG_NO_FILESAVE
+#if !defined(MODPLUG_NO_FILESAVE)
+#	define MODPLUG_NO_FILESAVE
+#endif
 #define NO_AGC
 #define LPCTSTR LPCSTR
 #define lstrcpyn strncpy
diff --exclude=.git --exclude=.hg -rupN ./src/libmodplug/src/sndfile.cpp ./src/libmodplug-patched/src/sndfile.cpp
--- ./src/libmodplug/src/sndfile.cpp	Mon Feb  3 01:14:41 2014
+++ ./src/libmodplug-patched/src/sndfile.cpp	Tue Aug 25 12:09:05 2015
@@ -1140,7 +1140,7 @@ UINT CSoundFile::ReadSample(MODINSTRUMEN
 			for (UINT j=0; j<len; j++)
 			{
 				delta += p[j];
-				*pSample++ = (signed char)delta;
+				*pSample++ = (signed char)(delta & 0xFF);
 			}
 		}
 		break;
diff --exclude=.git --exclude=.hg -rupN ./src/libmodplug/src/sndmix.cpp ./src/libmodplug-patched/src/sndmix.cpp
--- ./src/libmodplug/src/sndmix.cpp	Fri Aug 23 01:55:58 2013
+++ ./src/libmodplug-patched/src/sndmix.cpp	Tue Aug 25 12:09:05 2015
@@ -365,7 +365,7 @@ BOOL CSoundFile::ProcessRow()
 				// End of song ?
 				if ((m_nPattern == 0xFF) || (m_nCurrentPattern >= MAX_ORDERS))
 				{
-					//if (!m_nRepeatCount)
+					if (!m_nRepeatCount)
 						return FALSE;     //never repeat entire song
 					if (!m_nRestartPos)
 					{
@@ -398,7 +398,7 @@ BOOL CSoundFile::ProcessRow()
 							}
 						}
 					}
-//					if (m_nRepeatCount > 0) m_nRepeatCount--;
+					if (m_nRepeatCount > 0) m_nRepeatCount--;
 					m_nCurrentPattern = m_nRestartPos;
 					m_nRow = 0;
 					if ((Order[m_nCurrentPattern] >= MAX_PATTERNS) || (!Patterns[Order[m_nCurrentPattern]])) return FALSE;
